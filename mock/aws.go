// Code generated by MockGen. DO NOT EDIT.
// Source: paramedic/aws.go

// Package mock is a generated GoMock package.
package mock

import (
	cloudwatchlogs "github.com/aws/aws-sdk-go/service/cloudwatchlogs"
	s3 "github.com/aws/aws-sdk-go/service/s3"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockS3 is a mock of S3 interface
type MockS3 struct {
	ctrl     *gomock.Controller
	recorder *MockS3MockRecorder
}

// MockS3MockRecorder is the mock recorder for MockS3
type MockS3MockRecorder struct {
	mock *MockS3
}

// NewMockS3 creates a new mock instance
func NewMockS3(ctrl *gomock.Controller) *MockS3 {
	mock := &MockS3{ctrl: ctrl}
	mock.recorder = &MockS3MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockS3) EXPECT() *MockS3MockRecorder {
	return m.recorder
}

// GetObject mocks base method
func (m *MockS3) GetObject(arg0 *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
	ret := m.ctrl.Call(m, "GetObject", arg0)
	ret0, _ := ret[0].(*s3.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject
func (mr *MockS3MockRecorder) GetObject(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockS3)(nil).GetObject), arg0)
}

// MockCloudWatchLogs is a mock of CloudWatchLogs interface
type MockCloudWatchLogs struct {
	ctrl     *gomock.Controller
	recorder *MockCloudWatchLogsMockRecorder
}

// MockCloudWatchLogsMockRecorder is the mock recorder for MockCloudWatchLogs
type MockCloudWatchLogsMockRecorder struct {
	mock *MockCloudWatchLogs
}

// NewMockCloudWatchLogs creates a new mock instance
func NewMockCloudWatchLogs(ctrl *gomock.Controller) *MockCloudWatchLogs {
	mock := &MockCloudWatchLogs{ctrl: ctrl}
	mock.recorder = &MockCloudWatchLogsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudWatchLogs) EXPECT() *MockCloudWatchLogsMockRecorder {
	return m.recorder
}

// PutLogEvents mocks base method
func (m *MockCloudWatchLogs) PutLogEvents(arg0 *cloudwatchlogs.PutLogEventsInput) (*cloudwatchlogs.PutLogEventsOutput, error) {
	ret := m.ctrl.Call(m, "PutLogEvents", arg0)
	ret0, _ := ret[0].(*cloudwatchlogs.PutLogEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLogEvents indicates an expected call of PutLogEvents
func (mr *MockCloudWatchLogsMockRecorder) PutLogEvents(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLogEvents", reflect.TypeOf((*MockCloudWatchLogs)(nil).PutLogEvents), arg0)
}

// CreateLogStream mocks base method
func (m *MockCloudWatchLogs) CreateLogStream(arg0 *cloudwatchlogs.CreateLogStreamInput) (*cloudwatchlogs.CreateLogStreamOutput, error) {
	ret := m.ctrl.Call(m, "CreateLogStream", arg0)
	ret0, _ := ret[0].(*cloudwatchlogs.CreateLogStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogStream indicates an expected call of CreateLogStream
func (mr *MockCloudWatchLogsMockRecorder) CreateLogStream(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogStream", reflect.TypeOf((*MockCloudWatchLogs)(nil).CreateLogStream), arg0)
}
